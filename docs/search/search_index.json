{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hello Cloud \ud83d\udc4b\ud83c\udffc Hello and welcome! Several examples of \"hello world\" are provided and deployed to multiple cloud providers. \u270d\ud83c\udffc Make a contribution \u267e\ufe0f Learn about the DevOps pipeline Web Services NodeJS with ExpressJS","title":"Home"},{"location":"#hello-cloud","text":"\ud83d\udc4b\ud83c\udffc Hello and welcome! Several examples of \"hello world\" are provided and deployed to multiple cloud providers. \u270d\ud83c\udffc Make a contribution \u267e\ufe0f Learn about the DevOps pipeline","title":"Hello Cloud"},{"location":"#web-services","text":"NodeJS with ExpressJS","title":"Web Services"},{"location":"contribute/","text":"Contributing \ud83d\udc4b\ud83c\udffc Welcome and we are glad you are interested in contributing! Development This project attempts to support a variety of developer tooling choices while maintaining a standard that everyone can test against. Prerequisites \u26a0\ufe0f Windows users: \ud83d\udc49\ud83c\udffc task automation assumes a POSIX-compatible shell with Linux commands that work across most distributions and macOS. As a result, using Windows Subsystem for Linux (WSL2) \ud83d\udd17 is recommended with a Linux distribution like Debian, Ubuntu, or Kali Linux. You may also use Git BASH \ud83d\udd17 with make for Git BASH \ud83d\udd17 installed or cygwin \ud83d\udd17 with make for cygwin \ud83d\udd17 installed. You could also use a Linux virtual machine running on Windows Hyper-V \ud83d\udd17, Oracle VirtualBox \ud83d\udd17, or even using a VS Code \"devcontainer\" \ud83d\udd17. Tools: git \ud83d\udd17 for source control. git-town \ud83d\udd17 may be used for improved developer workflow. yarn \ud83d\udd17 or node \ud83d\udd17 are required to run the project * yarn is recommended . The version of yarn is \"pinned\" in \".yarnrc\" and will be automatically selected and used by the yarn command. nvm \ud83d\udd17 can make switching between specific versions of node , npm , and npx easier across projects for a more consistent project experience across machines. The version of node is \"pinned\" in \".nvmrc\" and will be automatically selected and used by the nvm use command. podman \ud83d\udd17, docker \ud83d\udd17, or docker with docker-compose \ud83d\udd17 are required to build the documentation and production container images. GNU make \ud83d\udd17 is used by DevOps pipelines Continuous Integration (CI) and Deployment (CD) to execute tasks. For consistency, you may choose to use this as well. VS code \ud83d\udd17 may be used for an improved developer experience with support for project-specific settings, extensions, and tasks. Executing tasks Task execution consistency can be critical when developing and triaging code. While many tools are supported, \"there is only one way\" for production, including the DevOps pipeline automation tasks. Local development machines and even DevOps pipeline machines have different Operating Systems, middleware tools, and configurations; they cannot be trusted to be reliable. Therefore, the \"one way\" is through containers and the default tool of choice is docker \ud83d\udc33; while this project would prefer to use a completely free and open source ecosystem like podman \ud83e\udd70\ud83d\udc96, docker is well established, virtually ubiquitous on most local and DevOps machines, and mostly free \ud83d\udd17 \ud83d\udcb8. All automation tasks are abstracted behind make \u2699\ufe0f command targets. This enables task consistency across projects and tooling. You may run most commands using your choice of podman , docker , docker-compose , yarn , or node / npm by adding a \"dev_tool\" parameter to the make command, where the value of the parameter matches your preferred tool (e.g. make install dev_tool=yarn or make start dev_tool=podman ). However, docker is recommended as the default tool used by DevOps pipeline tasks for production build, test, and deploy. If you do not wish to use make (e.g. yarn && yarn start ), review the commands in the \"./makefile\" and construct the appropriate command or simply try out what you expect to work. Running tasks Clone the repository with the command git clone --depth=1 https://github.com/ericis/hello-cloud Navigate to the project in a terminal or open your favorite editor Build the project with the command make or make install ( make build will also work if your forget) Start the system with the command make start ( make run , make up and make serve will also work if your forget) Stop the system with the default command make stop ( make down will also work if your forget). If you use an alternative tool running as a foreground process (e.g. yarn start ), simply kill the process (e.g. Command + . on macOS or Ctrl + C on Windows). Clean up temporary task artifacts with the command make clean ( make uninstall will also work if your forget)","title":"Contribute"},{"location":"contribute/#contributing","text":"\ud83d\udc4b\ud83c\udffc Welcome and we are glad you are interested in contributing!","title":"Contributing"},{"location":"contribute/#development","text":"This project attempts to support a variety of developer tooling choices while maintaining a standard that everyone can test against.","title":"Development"},{"location":"contribute/#prerequisites","text":"\u26a0\ufe0f Windows users: \ud83d\udc49\ud83c\udffc task automation assumes a POSIX-compatible shell with Linux commands that work across most distributions and macOS. As a result, using Windows Subsystem for Linux (WSL2) \ud83d\udd17 is recommended with a Linux distribution like Debian, Ubuntu, or Kali Linux. You may also use Git BASH \ud83d\udd17 with make for Git BASH \ud83d\udd17 installed or cygwin \ud83d\udd17 with make for cygwin \ud83d\udd17 installed. You could also use a Linux virtual machine running on Windows Hyper-V \ud83d\udd17, Oracle VirtualBox \ud83d\udd17, or even using a VS Code \"devcontainer\" \ud83d\udd17. Tools: git \ud83d\udd17 for source control. git-town \ud83d\udd17 may be used for improved developer workflow. yarn \ud83d\udd17 or node \ud83d\udd17 are required to run the project * yarn is recommended . The version of yarn is \"pinned\" in \".yarnrc\" and will be automatically selected and used by the yarn command. nvm \ud83d\udd17 can make switching between specific versions of node , npm , and npx easier across projects for a more consistent project experience across machines. The version of node is \"pinned\" in \".nvmrc\" and will be automatically selected and used by the nvm use command. podman \ud83d\udd17, docker \ud83d\udd17, or docker with docker-compose \ud83d\udd17 are required to build the documentation and production container images. GNU make \ud83d\udd17 is used by DevOps pipelines Continuous Integration (CI) and Deployment (CD) to execute tasks. For consistency, you may choose to use this as well. VS code \ud83d\udd17 may be used for an improved developer experience with support for project-specific settings, extensions, and tasks.","title":"Prerequisites"},{"location":"contribute/#executing-tasks","text":"Task execution consistency can be critical when developing and triaging code. While many tools are supported, \"there is only one way\" for production, including the DevOps pipeline automation tasks. Local development machines and even DevOps pipeline machines have different Operating Systems, middleware tools, and configurations; they cannot be trusted to be reliable. Therefore, the \"one way\" is through containers and the default tool of choice is docker \ud83d\udc33; while this project would prefer to use a completely free and open source ecosystem like podman \ud83e\udd70\ud83d\udc96, docker is well established, virtually ubiquitous on most local and DevOps machines, and mostly free \ud83d\udd17 \ud83d\udcb8. All automation tasks are abstracted behind make \u2699\ufe0f command targets. This enables task consistency across projects and tooling. You may run most commands using your choice of podman , docker , docker-compose , yarn , or node / npm by adding a \"dev_tool\" parameter to the make command, where the value of the parameter matches your preferred tool (e.g. make install dev_tool=yarn or make start dev_tool=podman ). However, docker is recommended as the default tool used by DevOps pipeline tasks for production build, test, and deploy. If you do not wish to use make (e.g. yarn && yarn start ), review the commands in the \"./makefile\" and construct the appropriate command or simply try out what you expect to work.","title":"Executing tasks"},{"location":"contribute/#running-tasks","text":"Clone the repository with the command git clone --depth=1 https://github.com/ericis/hello-cloud Navigate to the project in a terminal or open your favorite editor Build the project with the command make or make install ( make build will also work if your forget) Start the system with the command make start ( make run , make up and make serve will also work if your forget) Stop the system with the default command make stop ( make down will also work if your forget). If you use an alternative tool running as a foreground process (e.g. yarn start ), simply kill the process (e.g. Command + . on macOS or Ctrl + C on Windows). Clean up temporary task artifacts with the command make clean ( make uninstall will also work if your forget)","title":"Running tasks"},{"location":"devops/","text":"DevOps Local development See the contributor guide for local development. Pipelines Every attempt is made to ensure that all automation tasks done by a server can also be performed by a human. So, continuous integration and deployment shares a lot of the same make tasks that a developer would execute on their local machine. The production pipeline uses GitHub Actions with the source files under \"./.github/workflows/\" . Documentation Documentation is auto-generated using make ci-docs with MkDocs \ud83d\udd17, Material for MkDocs \ud83d\udd17, and the \"mkdocs-material\" \ud83d\udd17 dockerized task runtime. The result generates the source output of everything contained in \"./docs\".","title":"DevOps"},{"location":"devops/#devops","text":"","title":"DevOps"},{"location":"devops/#local-development","text":"See the contributor guide for local development.","title":"Local development"},{"location":"devops/#pipelines","text":"Every attempt is made to ensure that all automation tasks done by a server can also be performed by a human. So, continuous integration and deployment shares a lot of the same make tasks that a developer would execute on their local machine. The production pipeline uses GitHub Actions with the source files under \"./.github/workflows/\" .","title":"Pipelines"},{"location":"devops/#documentation","text":"Documentation is auto-generated using make ci-docs with MkDocs \ud83d\udd17, Material for MkDocs \ud83d\udd17, and the \"mkdocs-material\" \ud83d\udd17 dockerized task runtime. The result generates the source output of everything contained in \"./docs\".","title":"Documentation"},{"location":"license/","text":"License Everything in the project except \"./src/media/\" falls under \"Creative Commons Zero v1.0 Universal\". Media Path: \"./src/media/\" Media contained in this directory may have strict licensing restrictions beyond the project. \"./icons/logo/logo.svg\" may not be redistributed and is licensed to Eric Swanson from thenounproject.com","title":"License"},{"location":"license/#license","text":"Everything in the project except \"./src/media/\" falls under \"Creative Commons Zero v1.0 Universal\".","title":"License"},{"location":"license/#media","text":"Path: \"./src/media/\" Media contained in this directory may have strict licensing restrictions beyond the project. \"./icons/logo/logo.svg\" may not be redistributed and is licensed to Eric Swanson from thenounproject.com","title":"Media"},{"location":"services/nodejs-expressjs/","text":"Service: NodeJS with ExpressJS Path: ./src/nodejs/expressjs/webapi/ Runtime: NodeJS \ud83d\udd17 Language: JavaScript \ud83d\udd17 Framework: ExpressJS \ud83d\udd17 Getting started The contributor guide has the steps necessary to run this project locally. Deployments Heroku Prerequisites A Heroku account *this project worked with free infrastructure at the time of its creation heroku CLI Steps to deploy Login to your Heroku account with the CLI using the command heroku login Open a terminal and navigate to the service project directory (e.g. cd ./src/nodejs/expressjs/webapi ) Run the command make heroku-init to create and configure the cloud app including assigning the community monorepo buildpack as well as the node.js buildpack Install the application with the command make heroku-install Check the application logs with the command make heroku-logs Uninstall and clean up the application deployment with the command make heroku-uninstall Roadmap Future updates will deploy this service to multiple clouds using various backend infrastructure options.","title":"NodeJS with ExpressJS"},{"location":"services/nodejs-expressjs/#service-nodejs-with-expressjs","text":"Path: ./src/nodejs/expressjs/webapi/ Runtime: NodeJS \ud83d\udd17 Language: JavaScript \ud83d\udd17 Framework: ExpressJS \ud83d\udd17","title":"Service: NodeJS with ExpressJS"},{"location":"services/nodejs-expressjs/#getting-started","text":"The contributor guide has the steps necessary to run this project locally.","title":"Getting started"},{"location":"services/nodejs-expressjs/#deployments","text":"","title":"Deployments"},{"location":"services/nodejs-expressjs/#heroku","text":"","title":"Heroku"},{"location":"services/nodejs-expressjs/#prerequisites","text":"A Heroku account *this project worked with free infrastructure at the time of its creation heroku CLI","title":"Prerequisites"},{"location":"services/nodejs-expressjs/#steps-to-deploy","text":"Login to your Heroku account with the CLI using the command heroku login Open a terminal and navigate to the service project directory (e.g. cd ./src/nodejs/expressjs/webapi ) Run the command make heroku-init to create and configure the cloud app including assigning the community monorepo buildpack as well as the node.js buildpack Install the application with the command make heroku-install Check the application logs with the command make heroku-logs Uninstall and clean up the application deployment with the command make heroku-uninstall","title":"Steps to deploy"},{"location":"services/nodejs-expressjs/#roadmap","text":"Future updates will deploy this service to multiple clouds using various backend infrastructure options.","title":"Roadmap"}]}