{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hello Cloud todo","title":"Home"},{"location":"#hello-cloud","text":"todo","title":"Hello Cloud"},{"location":"contribute/","text":"Contributing \ud83d\udc4b\ud83c\udffc Welcome and we are glad you are interested in contributing! Development This project attempts to support a variety of developer tooling choices while maintaining a standard that everyone can test against. Prerequisites \u26a0\ufe0f Windows users: \ud83d\udc49\ud83c\udffc task automation assumes a POSIX-compatible shell with Linux commands that work across most distributions and macOS. As a result, using Windows Subsystem for Linux (WSL2) is recommended with a Linux distribution like Debian, Ubuntu, or Kali Linux. You may also use Git BASH with make for Git BASH installed or cygwin with make for cygwin installed. You could also use a Linux virtual machine running on Windows Hyper-V , Oracle VirtualBox , or even using a VS Code \"devcontainer\" . Tools: git for source control. git-town may be used for improved developer workflow. yarn or node are required to run the project * yarn is recommended . The version of yarn is \"pinned\" in \".yarnrc\" and will be automatically selected and used by the yarn command. nvm can make switching between specific versions of node , npm , and npx easier across projects for a more consistent project experience across machines. The version of node is \"pinned\" in \".nvmrc\" and will be automatically selected and used by the nvm use command. podman , docker , or docker with docker-compose are required to build the production container image. GNU make is used by DevOps pipelines Continuous Integration (CI) and Deployment (CD) to execute tasks. For consistency, you may choose to use this as well. VS code may be used for an improved developer experience with support for project-specific settings, extensions, and tasks. Executing tasks Task execution consistency can be critical when developing and triaging code. While many tools are supported, \"there is only one way\" for production, including the DevOps pipeline automation tasks. Local development machines and even DevOps pipeline machines have different Operating Systems, middleware tools, and configurations; they cannot be trusted to be reliable. Therefore, the \"one way\" is through containers and the default tool of choice is docker \ud83d\udc33; while this project would prefer to use a completely free and open source ecosystem like podman \ud83e\udd70\ud83d\udc96, docker is well established, virtually ubiquitous on most local and DevOps machines, and mostly free \ud83d\udcb8. All automation tasks are abstracted behind make \u2699\ufe0f command targets. This enables task consistency across projects and tooling. You may run most commands using your choice of podman , docker , docker-compose , yarn , or node / npm by adding a \"dev_tool\" parameter to the make command, where the value of the parameter matches your preferred tool (e.g. make install dev_tool=yarn or make start dev_tool=podman ). However, docker is recommended as the default tool used by DevOps pipeline tasks for production build, test, and deploy. If you do not wish to use make (e.g. yarn && yarn start ), review the commands in the \"./makefile\" and construct the appropriate command or simply try out what you expect to work. Running tasks Clone the repository with the command git clone --depth=1 https://github.com/ericis/hello-cloud Navigate to the project in a terminal or open your favorite editor Build the project with the command make or make install ( make build will also work if your forget) Start the system with the command make start ( make run , make up and make serve will also work if your forget) Stop the system with the default command make stop ( make down will also work if your forget). If you use an alternative tool running as a foreground process (e.g. yarn start ), simply kill the process (e.g. Command + . on macOS or Ctrl + C on Windows). Clean up temporary task artifacts with the command make clean ( make uninstall will also work if your forget)","title":"Contribute"},{"location":"contribute/#contributing","text":"\ud83d\udc4b\ud83c\udffc Welcome and we are glad you are interested in contributing!","title":"Contributing"},{"location":"contribute/#development","text":"This project attempts to support a variety of developer tooling choices while maintaining a standard that everyone can test against.","title":"Development"},{"location":"contribute/#prerequisites","text":"\u26a0\ufe0f Windows users: \ud83d\udc49\ud83c\udffc task automation assumes a POSIX-compatible shell with Linux commands that work across most distributions and macOS. As a result, using Windows Subsystem for Linux (WSL2) is recommended with a Linux distribution like Debian, Ubuntu, or Kali Linux. You may also use Git BASH with make for Git BASH installed or cygwin with make for cygwin installed. You could also use a Linux virtual machine running on Windows Hyper-V , Oracle VirtualBox , or even using a VS Code \"devcontainer\" . Tools: git for source control. git-town may be used for improved developer workflow. yarn or node are required to run the project * yarn is recommended . The version of yarn is \"pinned\" in \".yarnrc\" and will be automatically selected and used by the yarn command. nvm can make switching between specific versions of node , npm , and npx easier across projects for a more consistent project experience across machines. The version of node is \"pinned\" in \".nvmrc\" and will be automatically selected and used by the nvm use command. podman , docker , or docker with docker-compose are required to build the production container image. GNU make is used by DevOps pipelines Continuous Integration (CI) and Deployment (CD) to execute tasks. For consistency, you may choose to use this as well. VS code may be used for an improved developer experience with support for project-specific settings, extensions, and tasks.","title":"Prerequisites"},{"location":"contribute/#executing-tasks","text":"Task execution consistency can be critical when developing and triaging code. While many tools are supported, \"there is only one way\" for production, including the DevOps pipeline automation tasks. Local development machines and even DevOps pipeline machines have different Operating Systems, middleware tools, and configurations; they cannot be trusted to be reliable. Therefore, the \"one way\" is through containers and the default tool of choice is docker \ud83d\udc33; while this project would prefer to use a completely free and open source ecosystem like podman \ud83e\udd70\ud83d\udc96, docker is well established, virtually ubiquitous on most local and DevOps machines, and mostly free \ud83d\udcb8. All automation tasks are abstracted behind make \u2699\ufe0f command targets. This enables task consistency across projects and tooling. You may run most commands using your choice of podman , docker , docker-compose , yarn , or node / npm by adding a \"dev_tool\" parameter to the make command, where the value of the parameter matches your preferred tool (e.g. make install dev_tool=yarn or make start dev_tool=podman ). However, docker is recommended as the default tool used by DevOps pipeline tasks for production build, test, and deploy. If you do not wish to use make (e.g. yarn && yarn start ), review the commands in the \"./makefile\" and construct the appropriate command or simply try out what you expect to work.","title":"Executing tasks"},{"location":"contribute/#running-tasks","text":"Clone the repository with the command git clone --depth=1 https://github.com/ericis/hello-cloud Navigate to the project in a terminal or open your favorite editor Build the project with the command make or make install ( make build will also work if your forget) Start the system with the command make start ( make run , make up and make serve will also work if your forget) Stop the system with the default command make stop ( make down will also work if your forget). If you use an alternative tool running as a foreground process (e.g. yarn start ), simply kill the process (e.g. Command + . on macOS or Ctrl + C on Windows). Clean up temporary task artifacts with the command make clean ( make uninstall will also work if your forget)","title":"Running tasks"}]}